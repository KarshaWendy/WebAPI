const mysql = require('mysql')
const express =require('express')
const bodyParser = require('body-parser')

const app = express()
const port = process.env.port  || 5000 


app.use(bodyParser.urlencoded({
    extended: true
  }));

app.use(bodyParser.json()) //passing JSON data to queries

//connection pool to reuse commands executed on the DB

const pool =mysql.createPool({
    connectionLimit : 10,
    host            :'localhost',
    user            :'root',
    password        : '',
    database        : 'smart_international'
});


// GET request for guests
app.get('',(req, res) => {

    pool.getConnection((err, connection) =>{
        if(err) throw err
        console.log('connected as id ${connection.threadId}')

        connection.query('SELECT guests.id, guests.name, guests.email, guests.phone, reservations.name as reservation_name, guests.created, guests.modified FROM `guests`, `reservations` WHERE guests.reservation_id = reservations.id; ',(err, rows) =>{
            connection.release() //return the connection to pool

            if(!err) {
                res.send(rows)
            } else {
                console.log(err)
            }
        })
    })
})

// GET request for guests by ID
app.get('/:id',(req, res) => {

    pool.getConnection((err, connection) =>{
        if(err) throw err
        console.log('connected as id ${connection.threadId}')

        connection.query('SELECT guests.id, guests.name, guests.email, guests.phone, reservations.name as reservation_name, guests.created, guests.modified FROM `guests`, `reservations` WHERE guests.reservation_id = reservations.id AND guests.id=?', [req.params.id], (err, rows) =>{
            connection.release() //return the connection to pool

            if(!err) {
                res.send(rows)
            } else {
                console.log(err)
            }
        })
    })
})

// DELETE request for guests by ID
app.delete('/:id',(req, res) => {

    pool.getConnection((err, connection) =>{
        if(err) throw err
        console.log('connected as id ${connection.threadId}')

        connection.query('DELETE from guests WHERE id = ?', [req.params.id], (err, rows) =>{
            connection.release() //return the connection to pool

            if(!err) {
                res.send('The guest reservation: ${[req.params.id] no longer exists.')
            } else {
                console.log(err)
            }
        })
    })
}) 

// update request for guests
app.put('/:id',(req, res) => {

    pool.getConnection((err, connection) =>{
        if(err) throw err
       // console.log('connected as id ${connection.threadId}')
 
        const{id,name,email,phone,reservation_id,created,modified} = req.body
        console.log(req)
        
        connection.query('UPDATE guests SET name=?,email = ?,phone = ?,reservation_id=?,created =?, modified =? WHERE id =?',[name,email,phone,reservation_id,created,modified,id], (err, rows) =>{
            connection.release() //return the connection to pool

            if(!err) {
                res.send('The guest reservation has been updated successfully.')
            } else {
                console.log(err)
            }
        })
        console.log(req.body)
    })
})

// add request for guests
app.post('',(req, res) => {

    pool.getConnection((err, connection) =>{
        if(err) throw err
        console.log('connected as id ${connection.threadId}')

        const params = req.body 
        connection.query("INSERT INTO `guests` (`name`,`email`,`phone`,'reservation_id', `created`, `modified`) VALUES(?,?,?,?,?,?)",[params.name,params.email,params.phone,params.reservation_id,params.created,params.modified], (err, rows) =>{
            connection.release() //return the connection to pool

            if(!err) {
                res.send('The guest reservation has been added successfully.')
            } else {
                console.log(err)
            }
        })
        console.log(req.body)
    })
})

//GET request for reservations
app.get('/reservations',(req, res) => {
    console.log('hello')
    pool.getConnection((err, connection) =>{
        if(err) throw err
        console.log('hello')
        connection.query('SELECT * from reservations',[req.params], (err, rows) =>{
            connection.release() //return the connection to pool
            if(!err) {
                res.send(rows)
            } else {
                console.log(err)
            }
        })
    })
})

// GET request for reservations by ID
app.get('/reservations/:id',(req, res) => {

    pool.getConnection((err, connection) =>{
        if(err) throw err
        console.log('connected as id ${connection.threadId}')

        connection.query('SELECT * from reservations WHERE id = ?', [req.params.id], (err, rows) =>{
            connection.release() //return the connection to pool

            if(!err) {
                res.send(rows)
            } else {
                console.log(err)
            }
        })
    })
})


// DELETE request for reservations by ID
app.delete('/reservations/:id',(req, res) => {

    pool.getConnection((err, connection) =>{
        if(err) throw err
        console.log('connected as id ${connection.threadId}')

        connection.query('DELETE from reservations WHERE id = ?', [req.params.id], (err, rows) =>{
            connection.release() //return the connection to pool

            if(!err) {
                res.send('The reservation: ${[req.params.id] no longer exists.')
            } else {
                console.log(err)
            }
        })
    })
})

// add request for reservations
app.post('/reservations',(req, res) => {

    pool.getConnection((err, connection) =>{
        if(err) throw err
        console.log('connected as id ${connection.threadId}')

        const params = req.body 
        connection.query("INSERT INTO `reservations` (`name`,`location`,`description`, `created`, `modified`) VALUES(?,?,?,?,?)",[params.name,params.location,params.description,params.created,params.modified], (err, rows) =>{
            connection.release() //return the connection to pool

            if(!err) {
                res.send('The reservation has been added successfully.')
            } else {
                console.log(err)
            }
        })
        console.log(req.body)
    })
})
// update request for reservations
app.put('/reservations/:id',(req, res) => {

    pool.getConnection((err, connection) =>{
        if(err) throw err
        console.log('connected as id ${connection.threadId}')
 
        const{id,name,location,description,created,modified} = req.body
        console.log(req.body)
        
        connection.query('UPDATE reservations SET name=?,location = ?,description = ?,created =?, modified =? WHERE id =?',[name,location,description,created,modified,id], (err, rows) =>{
            connection.release() //return the connection to pool

            if(!err) {
                res.send('The reservation has been updated successfully.')
            } else {
                console.log(err)
            }
        })
        console.log(req.body)
    })
})
//GET request for administrators
app.get('/administrators',(req, res) => {

    pool.getConnection((err, connection) =>{
        if(err) throw err
        console.log('connected as id ${connection.threadId}')

        connection.query('SELECT * from administrators',(err, rows) =>{
            connection.release() //return the connection to pool

            if(!err) {
                res.send(rows)
            } else {
                console.log(err)
            }
        })
    })
})

// GET request for administrators by ID
app.get('/administrators/:id',(req, res) => {

    pool.getConnection((err, connection) =>{
        if(err) throw err
        console.log('connected as id ${connection.threadId}')

        connection.query('SELECT * from administrators WHERE id = ?', [req.params.id], (err, rows) =>{
            connection.release() //return the connection to pool

            if(!err) {
                res.send(rows)
            } else {
                console.log(err)
            }
        })
    })
})


// DELETE request for administrators by ID
app.delete('/administrators/:id',(req, res) => {

    pool.getConnection((err, connection) =>{
        if(err) throw err
        console.log('connected as id ${connection.threadId}')

        connection.query('DELETE from administrators WHERE id = ?', [req.params.id], (err, rows) =>{
            connection.release() //return the connection to pool

            if(!err) {
                res.send('The administrator: ${[req.params.id] no longer exists.')
            } else {
                console.log(err)
            }
        })
    })
})

// add request for administrators
app.post('/administrators',(req, res) => {

    pool.getConnection((err, connection) =>{
        if(err) throw err
        console.log('connected as id ${connection.threadId}')

        const params = req.body 
        connection.query("INSERT INTO `administrators` (`name`,`email`,`created`, `modified`) VALUES(?,?,?,?)",[params.name,params.email,params.created,params.modified], (err, rows) =>{
            connection.release() //return the connection to pool

            if(!err) {
                res.send('The administrator has been added successfully.')
            } else {
                console.log(err)
            }
        })
        console.log(req.body)
    })
})


// update request for administrator
app.put('/administrators/:id',(req, res) => {

    pool.getConnection((err, connection) =>{
        if(err) throw err
        console.log('connected as id ${connection.threadId}')
 
        const{id,name,email,created, modified} = req.body
        
        connection.query('UPDATE administrators SET name =?, email =?, modified =? WHERE id =?',[id,name,email, modified], (err, rows) =>{
            connection.release() //return the connection to pool

            if(!err) {
                res.send('The administrator: ${[name] has been updated successfully.')
            } else {
                console.log(err)
            }
        })
        console.log(req.body)
    })
})

// listen to specified port 
app.listen(port, () => console.log(`Server started at port ${port}`));